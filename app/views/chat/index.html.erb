<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <title>Chat App</title>
  <style>
      body {
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          background: linear-gradient(135deg, #f5f7fa, #c3cfe2);
          margin: 0;
          padding: 0;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          overflow: hidden;
      }

      .chat-wrapper {
          display: flex;
          width: 100%;
          height: 100%;
          max-width: 1200px;
          max-height: 800px;
          box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
          border-radius: 12px;
          overflow: hidden;
          background: #fff;
      }

      .sidebar {
          width: 25%;
          background: #007bff;
          color: #fff;
          border-radius: 12px 0 0 12px;
          overflow-y: auto;
          box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
          display: flex;
          flex-direction: column;
      }

      .sidebar h2 {
          padding: 20px;
          text-align: center;
          margin: 0;
          background: #0056b3;
          border-bottom: 1px solid #004080;
      }

      .chat-item {
          padding: 15px;
          border-bottom: 1px solid #0056b3;
          cursor: pointer;
          display: flex;
          justify-content: space-between;
          align-items: center;
      }

      .chat-item:hover {
          background: #0056b3;
      }

      .chat-item.active {
          background: #004080;
          font-weight: bold;
      }

      .delete-conversation {
          color: #fff;
          cursor: pointer;
          font-size: 18px;
          transition: color 0.3s;
      }

      .delete-conversation:hover {
          color: #ff4d4d;
      }

      .container {
          width: 75%;
          display: flex;
          flex-direction: column;
          background: #f9f9f9;
          border-radius: 0 12px 12px 0;
          box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
      }

      #chat-box {
          padding: 20px;
          flex-grow: 1;
          overflow-y: auto;
          border-bottom: 1px solid #ddd;
          background: #fff;
          border-radius: 0 12px 0 0;
      }

      .message {
          margin: 10px 0;
          padding: 15px;
          border-radius: 12px;
          max-width: 80%;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }

      .User {
          background: #25d96e;
          color: #fff;
          align-self: flex-end;
          border-bottom-right-radius: 0;
      }

      .Chatbot {
          background: #f1f1f1;
          color: #000;
          align-self: flex-start;
          border-bottom-left-radius: 0;
      }

      form {
          display: flex;
          padding: 10px;
          background: #f1f1f1;
          border-top: 1px solid #ddd;
          border-radius: 0 0 12px 0;
      }

      input[type="text"] {
          flex: 1;
          padding: 15px;
          border: none;
          border-radius: 12px 0 0 12px;
          background: #fff;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }

      button {
          padding: 15px 25px;
          border: none;
          background: #007bff;
          color: #fff;
          border-radius: 0 12px 12px 0;
          cursor: pointer;
          transition: background 0.3s;
      }

      button:hover {
          background: #0056b3;
      }

      #new-conversation {
          background: #0056b3;
          border: none;
          color: #fff;
          font-size: 24px;
          padding: 10px 20px;
          border-radius: 50%;
          cursor: pointer;
          transition: background 0.3s;
          margin: 20px auto;
          display: block;
      }

      #new-conversation:hover {
          background: #004080;
      }
  </style>
</head>
<body>
<div class="chat-wrapper">
  <!-- Sidebar for chat history -->
  <div class="sidebar">
    <h2>Chat History</h2>
    <% @conversations.each_with_index do |conversation, index| %>
      <div class="chat-item" data-conversation-id="<%= conversation.id %>">
        会话 <%= conversation.id + 1 %>
        <span class="delete-conversation" data-conversation-id="<%= conversation.id %>">🗑️</span>
      </div>
    <% end %>
    <button id="new-conversation">＋</button>
  </div>

  <!-- Main Chat Container -->
  <div class="container">
    <div id="chat-box">
      <% @messages.each do |message| %>
        <div class="message <%= message[:user] == "Chatbot" ? 'Chatbot' : 'User' %>">
          <strong><%= message[:user] %>:</strong> <%= message[:text] %>
        </div>
      <% end %>
    </div>
    <%= form_with url: chat_path, method: :post do |form| %>
      <%= form.text_field :message, placeholder: "Type your message...", required: true %>
      <%= form.submit "Send" %>
    <% end %>
  </div>
</div>

<script>
    // 初始化时加载第一个会话
    document.addEventListener("DOMContentLoaded", function() {
        var firstConversationId = <%= @first_conversation_id %>; // 从后端获取最小的 conversation.id
        loadConversation(firstConversationId); // 初始加载最小的会话
        // 自动给第一个会话添加高亮
        var firstChatItem = document.querySelector('.chat-item[data-conversation-id="' + firstConversationId + '"]');
        if (firstChatItem) {
            firstChatItem.classList.add('active');
        }
    });

    document.querySelectorAll('.chat-item').forEach(function(item) {
        item.addEventListener('click', function() {
            var conversationId = this.getAttribute('data-conversation-id');
            loadConversation(conversationId);

            // 移除其他会话的高亮
            document.querySelectorAll('.chat-item').forEach(function(el) {
                el.classList.remove('active');
            });

            // 添加高亮到当前会话
            this.classList.add('active');
        });
    });

    document.querySelectorAll('.delete-conversation').forEach(function(button) {
        button.addEventListener('click', function(event) {
            event.stopPropagation();  // 防止触发点击会话的事件
            var conversationId = this.getAttribute('data-conversation-id');
            deleteConversation(conversationId);
        });
    });

    function loadConversation(conversationId) {
        fetch(`/conversations/${conversationId}`)
            .then(response => response.json())
            .then(data => {
                var chatBox = document.getElementById('chat-box');
                chatBox.innerHTML = ''; // 清空当前聊天框
                data.messages.forEach(function(message) {
                    var messageDiv = document.createElement('div');
                    messageDiv.className = 'message ' + (message.user == "Chatbot" ? 'Chatbot' : 'User');
                    messageDiv.innerHTML = '<strong>' + message.user + ':</strong> ' + message.text;
                    chatBox.appendChild(messageDiv);
                });

                // 滚动到底部，确保显示最新消息
                setTimeout(function() {
                    chatBox.scrollTop = chatBox.scrollHeight;
                }, 50);
            });
    }

    // 提交表单后自动滚动到底部
    document.addEventListener("turbo:submit-end", function() {
        var chatBox = document.getElementById('chat-box');
        setTimeout(function() {
            chatBox.scrollTop = chatBox.scrollHeight;
        }, 50);

        // 清空消息输入框
        var messageInput = document.querySelector('input[type="text"]');
        if (messageInput) {
            messageInput.value = '';  // 清空输入框内容
        }
    });

    document.getElementById('new-conversation').addEventListener('click', function() {
        fetch('/conversations/new', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            }
        })
            .then(response => response.json())
            .then(data => {
                // 添加新会话到侧边栏，并确保包含删除按钮
                var sidebar = document.querySelector('.sidebar');
                var newChatItem = document.createElement('div');
                newChatItem.className = 'chat-item';
                newChatItem.setAttribute('data-conversation-id', data.id);
                newChatItem.innerHTML = `
          会话 ${data.id + 1}
          <span class="delete-conversation" data-conversation-id="${data.id}">🗑️</span>
        `;
                sidebar.insertBefore(newChatItem, sidebar.lastElementChild);

                // 重新绑定删除按钮的事件监听器
                newChatItem.querySelector('.delete-conversation').addEventListener('click', function(event) {
                    event.stopPropagation();
                    deleteConversation(data.id);
                });
                // 自动打开新创建的会话
                loadConversation(data.id);

                // 移除其他会话的高亮
                document.querySelectorAll('.chat-item').forEach(function(el) {
                    el.classList.remove('active');
                });

                // 高亮新会话
                newChatItem.classList.add('active');
            });
    });

    // 删除会话
    function deleteConversation(conversationId) {
        if (!confirm("确定要删除这个会话吗？")) {
            return;
        }

        fetch(`/conversations/${conversationId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            }
        })
            .then(response => {
                if (response.ok) {
                    // 从侧边栏移除该会话
                    var chatItem = document.querySelector(`.chat-item[data-conversation-id="${conversationId}"]`);
                    if (chatItem) {
                        chatItem.remove();
                    }

                    // 如果是当前会话，清空聊天框
                    var chatBox = document.getElementById('chat-box');
                    if (parseInt(conversationId) === 0) {
                        chatBox.innerHTML = ''; // 清空当前聊天框
                    }

                    alert("会话已删除");
                } else {
                    alert("删除失败，请稍后再试。");
                }
            })
            .catch(error => {
                console.error('删除会话时出错:', error);
                alert("删除失败，请稍后再试。");
            });
    }
</script>
</body>
</html>